{"version":3,"sources":["api.js","ChessBoard.js","home.js","App.js","serviceWorker.js","index.js"],"names":["post_board","board","a","content","fetch","method","headers","body","JSON","stringify","response","json","Board","state","fen","dropSquareStyle","squareStyles","pieceSquare","square","history","checkOrientation","props","userColor","aiPlay","removeHighlightSquare","setState","squareStyling","highlightSquare","sourceSquare","squaresToHighlight","highlightStyles","reduce","c","background","borderRadius","onDrop","targetSquare","game","move","from","to","promotion","verbose","sloppy","match_status","handleMatchEnd","toast","error","onMouseOverSquare","moves","length","i","color","push","onMouseOutSquare","onDragOverSquare","backgroundColor","boxShadow","this","Chess","children","position","Component","Game","id","width","orientation","boardStyle","React","Home","dimmerActive","endGameModal","winner","message","colorOptions","key","value","text","setUserColor","e","data","handleHeader","handleReplayClick","Segment","compact","padded","inverted","size","Dimmer","active","page","Modal","open","Header","Content","Dropdown","placeholder","options","onChange","Actions","Button","positive","disabled","onClick","negative","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ffd90cc2.chunk.js","sourcesContent":["\r\nasync function post_board(board) {\r\n        const content = {'board' : board}\r\n        let response = await fetch(\"/api/submit_move\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(content)\r\n        })\r\n        return response.json()\r\n}\r\n\r\nexport { post_board }","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Chessboard from \"chessboardjsx\";\r\nimport Chess from \"chess.js\";\r\n\r\nimport { post_board } from './api';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Segments of the code below were obtained from the chessboard.jsx demo. https://chessboardjsx.com/\r\n\r\nclass Board extends Component {\r\n  static propTypes = { children: PropTypes.func };\r\n\r\n  state = {\r\n    fen: \"start\",\r\n    // square styles for active drop square\r\n    dropSquareStyle: {},\r\n    // custom square styles\r\n    squareStyles: {},\r\n    // square with the currently clicked piece\r\n    pieceSquare: \"\",\r\n    // currently clicked square\r\n    square: \"\",\r\n    // array of past game moves\r\n    history: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.game = new Chess();\r\n    this.checkOrientation();\r\n  }\r\n\r\n  checkOrientation = () => {\r\n    if (this.props.userColor === 'b') {\r\n      this.aiPlay()\r\n    }\r\n  }\r\n\r\n  // keep clicked square style and remove hint squares\r\n  removeHighlightSquare = () => {\r\n    this.setState(({ pieceSquare, history }) => ({\r\n      squareStyles: squareStyling({ pieceSquare, history })\r\n    }));\r\n  };\r\n\r\n  // show possible moves\r\n  highlightSquare = (sourceSquare, squaresToHighlight) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\r\n              borderRadius: \"50%\"\r\n            }\r\n          },\r\n          ...squareStyling({\r\n            history: this.state.history,\r\n            pieceSquare: this.state.pieceSquare\r\n          })\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    this.setState(({ squareStyles }) => ({\r\n      squareStyles: { ...squareStyles, ...highlightStyles }\r\n    }));\r\n  };\r\n\r\n  onDrop = ({ sourceSquare, targetSquare }) => {\r\n    // see if the move is legal\r\n    let move = this.game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\" // always promote to a queen for example simplicity\r\n    });\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    this.setState(({ history, pieceSquare }) => ({\r\n      fen: this.game.fen(),\r\n      history: this.game.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history })\r\n    }));\r\n\r\n    this.aiPlay();\r\n\r\n  };\r\n\r\n  aiPlay = async () => {\r\n    try {\r\n      let response = await post_board(this.game.fen())\r\n      let ai_move = this.game.move(response.board, {\r\n        sloppy: true\r\n      });\r\n\r\n      if (ai_move === null) return;\r\n      this.setState(({ history, pieceSquare }) => ({\r\n        fen: this.game.fen(),\r\n        history: this.game.history({ verbose: true }),\r\n        squareStyles: squareStyling({ pieceSquare, history })\r\n      }));\r\n\r\n      if (response.match_status !== 'continuing') this.handleMatchEnd(response);\r\n    } catch (e) {\r\n      toast.error(\"Uh oh! Harold couldn't handle the pressure... Try refreshing\")\r\n    }\r\n\r\n  }\r\n\r\n  onMouseOverSquare = square => {\r\n    // get list of possible moves for this square\r\n    let moves = this.game.moves({\r\n      square: square,\r\n      verbose: true\r\n    });\r\n\r\n    // exit if there are no moves available for this square\r\n    if (moves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < moves.length; i++) {\r\n      if (moves[i].color !== this.props.userColor) return;\r\n      squaresToHighlight.push(moves[i].to);\r\n    }\r\n\r\n    this.highlightSquare(square, squaresToHighlight);\r\n  };\r\n\r\n  onMouseOutSquare = square => this.removeHighlightSquare(square);\r\n\r\n  // central squares get diff dropSquareStyles\r\n  onDragOverSquare = square => {\r\n    this.setState({\r\n      dropSquareStyle:\r\n        square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n          ? { backgroundColor: \"cornFlowerBlue\" }\r\n          : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" }\r\n    });\r\n  };\r\n\r\n  handleMatchEnd = (response) => {\r\n    this.props.handleMatchEnd(response);\r\n  }\r\n\r\n  render() {\r\n    const { fen, dropSquareStyle, squareStyles } = this.state;\r\n\r\n    return (\r\n      this.props.children({\r\n        squareStyles,\r\n        position: fen,\r\n        onMouseOverSquare: this.onMouseOverSquare,\r\n        onMouseOutSquare: this.onMouseOutSquare,\r\n        onDrop: this.onDrop,\r\n        dropSquareStyle,\r\n        onDragOverSquare: this.onDragOverSquare,\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nexport default class Game extends React.Component{\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Board userColor={this.props.userColor} handleMatchEnd={this.props.handleMatchEnd}>\r\n          {({\r\n            position,\r\n            onDrop,\r\n            onMouseOverSquare,\r\n            onMouseOutSquare,\r\n            squareStyles,\r\n            dropSquareStyle,\r\n            onDragOverSquare\r\n          }) => (\r\n              <Chessboard\r\n                id=\"board\"\r\n                width={320}\r\n                position={position}\r\n                orientation={this.props.userColor === 'w' ? 'white' : 'black'}\r\n                onDrop={onDrop}\r\n                onMouseOverSquare={onMouseOverSquare}\r\n                onMouseOutSquare={onMouseOutSquare}\r\n                boardStyle={{\r\n                  borderRadius: \"5px\",\r\n                  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\r\n                }}\r\n                squareStyles={squareStyles}\r\n                dropSquareStyle={dropSquareStyle}\r\n                onDragOverSquare={onDragOverSquare}\r\n              />\r\n            )}\r\n        </Board>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst squareStyling = ({ pieceSquare, history }) => {\r\n  const sourceSquare = history.length && history[history.length - 1].from;\r\n  const targetSquare = history.length && history[history.length - 1].to;\r\n\r\n  return {\r\n    [pieceSquare]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" },\r\n    ...(history.length && {\r\n      [sourceSquare]: {\r\n        backgroundColor: \"rgba(255, 255, 0, 0.4)\"\r\n      }\r\n    }),\r\n    ...(history.length && {\r\n      [targetSquare]: {\r\n        backgroundColor: \"rgba(255, 255, 0, 0.4)\"\r\n      }\r\n    })\r\n  };\r\n};","import React from 'react';\r\nimport { Segment, Dimmer, Modal, Button, Header, Dropdown } from 'semantic-ui-react'\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nimport Game from './ChessBoard';\r\n\r\nclass Home extends React.Component {\r\n\r\n  state = {\r\n    dimmerActive: true,\r\n    endGameModal: false,\r\n    winner: '',\r\n    userColor: '',\r\n    message: ''\r\n  }\r\n\r\n  colorOptions = [\r\n    { key: 'w', value: 'w', text: 'White' },\r\n    { key: 'b', value: 'b', text: 'Black' },\r\n  ]\r\n\r\n  setUserColor = (e, data) => {\r\n    this.setState({ userColor: data.value })\r\n  }\r\n\r\n  handleMatchEnd = (response) => {\r\n    let winner = ''\r\n    if (response.match_status === '1-0') {\r\n      winner = 'w';\r\n    } else if (response.match_status === '0-1') {\r\n      winner = 'b';\r\n    } else {\r\n      winner = 'draw';\r\n    }\r\n    this.setState({\r\n      endGameModal: true,\r\n      winner: winner,\r\n      message: response.message,\r\n    })\r\n  }\r\n\r\n  handleHeader = (winner) => {\r\n    if (winner === this.state.userColor) {\r\n      return \"Congratulations! You bested Harold the Chess Engine\";\r\n    } else if (winner === 'b' || winner === 'w') {\r\n      return \"Too bad, you were no match for Harold.\";\r\n    } else {\r\n      return \"Game Over\";\r\n    }\r\n  }\r\n\r\n  handleReplayClick = () => {\r\n    this.setState({\r\n      dimmerActive: !this.state.dimmerActive,\r\n      userColor: '',\r\n      endGameModal: false,\r\n      winner: '',\r\n      message: ''\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { dimmerActive, userColor, endGameModal, winner, message } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Segment compact padded='very' color='grey' inverted size='massive'>\r\n          <Dimmer active={dimmerActive} page />\r\n          {dimmerActive ?\r\n            <Modal open={dimmerActive}>\r\n              <Header> Welcome to Harold the Chess Engine </Header>\r\n              <Modal.Content>\r\n                <p>\r\n                  Harold was developed by Julian, Ryan and Conor as part of a term project for ECE 470 at the University of Victoria. Enjoy!\r\n                </p>\r\n                <p>\r\n                  Please select your colour to begin playing:\r\n                </p>\r\n                <Dropdown placeholder='Colour' options={this.colorOptions} onChange={(e, data) => this.setUserColor(e, data)} />\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button positive disabled={userColor === ''} onClick={() => this.setState({ dimmerActive: !dimmerActive })}>Play!</Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            : <Game userColor={userColor} handleMatchEnd={this.handleMatchEnd} />}\r\n          {endGameModal ?\r\n            <Modal open={endGameModal}>\r\n              <Header> {this.handleHeader(winner)} </Header>\r\n              <Modal.Content>\r\n                <p>\r\n                  {message}\r\n                </p>\r\n                <p>\r\n                  Would you like to play again?\r\n                </p>\r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button positive onClick={() => this.handleReplayClick()}>Play Again!</Button>\r\n                <Button negative onClick={() => this.setState({ endGameModal: false })}>Close</Button>\r\n              </Modal.Actions>\r\n            </Modal> : \"\"}\r\n          <ToastContainer />\r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\n\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nimport Home from './home';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}