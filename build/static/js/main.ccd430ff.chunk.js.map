{"version":3,"sources":["api.js","ChessBoard.js","home.js","App.js","serviceWorker.js","index.js"],"names":["post_board","board","a","content","fetch","method","headers","body","JSON","stringify","response","json","Board","state","fen","dropSquareStyle","squareStyles","pieceSquare","square","history","checkOrientation","props","userColor","aiPlay","removeHighlightSquare","setState","squareStyling","highlightSquare","sourceSquare","squaresToHighlight","highlightStyles","reduce","c","background","borderRadius","onDrop","targetSquare","game","move","from","to","promotion","verbose","sloppy","onMouseOverSquare","moves","length","i","color","push","onMouseOutSquare","onDragOverSquare","backgroundColor","boxShadow","this","Chess","children","position","Component","Game","id","width","orientation","boardStyle","Home","dimmerActive","colorOptions","key","value","text","setUserColor","e","data","console","log","Segment","compact","padded","inverted","size","Dimmer","active","page","Modal","open","Header","Content","Dropdown","placeholder","options","onChange","Actions","Button","positive","disabled","onClick","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccd430ff.chunk.js","sourcesContent":["\r\nasync function post_board(board) {\r\n        const content = {'board' : board}\r\n        let response = await fetch(\"/api/submit_move\", {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(content)\r\n        })\r\n        return response.json()\r\n}\r\n\r\nexport { post_board }","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Chessboard from \"chessboardjsx\";\r\nimport Chess from \"chess.js\";\r\n\r\nimport { post_board } from './api';\r\n\r\n// Segments of the code below were obtained from the chessboard.jsx demo. https://chessboardjsx.com/\r\n\r\nclass Board extends Component {\r\n  static propTypes = { children: PropTypes.func };\r\n\r\n  state = {\r\n    fen: \"start\",\r\n    // square styles for active drop square\r\n    dropSquareStyle: {},\r\n    // custom square styles\r\n    squareStyles: {},\r\n    // square with the currently clicked piece\r\n    pieceSquare: \"\",\r\n    // currently clicked square\r\n    square: \"\",\r\n    // array of past game moves\r\n    history: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.game = new Chess();\r\n    this.checkOrientation();\r\n  }\r\n\r\n  checkOrientation = () => {\r\n    if(this.props.userColor.userColor === 'b'){\r\n      this.aiPlay()\r\n    }\r\n  }\r\n\r\n  // keep clicked square style and remove hint squares\r\n  removeHighlightSquare = () => {\r\n    this.setState(({ pieceSquare, history }) => ({\r\n      squareStyles: squareStyling({ pieceSquare, history })\r\n    }));\r\n  };\r\n\r\n  // show possible moves\r\n  highlightSquare = (sourceSquare, squaresToHighlight) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\r\n              borderRadius: \"50%\"\r\n            }\r\n          },\r\n          ...squareStyling({\r\n            history: this.state.history,\r\n            pieceSquare: this.state.pieceSquare\r\n          })\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    this.setState(({ squareStyles }) => ({\r\n      squareStyles: { ...squareStyles, ...highlightStyles }\r\n    }));\r\n  };\r\n\r\n  onDrop = ({ sourceSquare, targetSquare }) => {\r\n    // see if the move is legal\r\n    let move = this.game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: \"q\" // always promote to a queen for example simplicity\r\n    });\r\n\r\n    // illegal move\r\n    if (move === null) return;\r\n    this.setState(({ history, pieceSquare }) => ({\r\n      fen: this.game.fen(),\r\n      history: this.game.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history })\r\n    }));\r\n\r\n    this.aiPlay();\r\n\r\n  };\r\n\r\n  aiPlay = async () => {\r\n    let response = await post_board(this.game.fen())\r\n\r\n    let ai_move = this.game.move(response.board, {\r\n      sloppy: true\r\n    });\r\n\r\n    if (ai_move === null) return;\r\n    this.setState(({ history, pieceSquare }) => ({\r\n      fen: this.game.fen(),\r\n      history: this.game.history({ verbose: true }),\r\n      squareStyles: squareStyling({ pieceSquare, history })\r\n    }));\r\n  }\r\n\r\n  onMouseOverSquare = square => {\r\n    // get list of possible moves for this square\r\n    let moves = this.game.moves({\r\n      square: square,\r\n      verbose: true\r\n    });\r\n\r\n    // exit if there are no moves available for this square\r\n    if (moves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < moves.length; i++) {\r\n      if(moves[i].color !== this.props.userColor.userColor) return;\r\n      squaresToHighlight.push(moves[i].to);\r\n    }\r\n\r\n    this.highlightSquare(square, squaresToHighlight);\r\n  };\r\n\r\n  onMouseOutSquare = square => this.removeHighlightSquare(square);\r\n\r\n  // central squares get diff dropSquareStyles\r\n  onDragOverSquare = square => {\r\n    this.setState({\r\n      dropSquareStyle:\r\n        square === \"e4\" || square === \"d4\" || square === \"e5\" || square === \"d5\"\r\n          ? { backgroundColor: \"cornFlowerBlue\" }\r\n          : { boxShadow: \"inset 0 0 1px 4px rgb(255, 255, 0)\" }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { fen, dropSquareStyle, squareStyles } = this.state;\r\n\r\n    return this.props.children({\r\n      squareStyles,\r\n      position: fen,\r\n      onMouseOverSquare: this.onMouseOverSquare,\r\n      onMouseOutSquare: this.onMouseOutSquare,\r\n      onDrop: this.onDrop,\r\n      dropSquareStyle,\r\n      onDragOverSquare: this.onDragOverSquare,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function Game(userColor) {\r\n\r\n  return (\r\n    <div>\r\n      <Board userColor={userColor}>\r\n        {({\r\n          position,\r\n          onDrop,\r\n          onMouseOverSquare,\r\n          onMouseOutSquare,\r\n          squareStyles,\r\n          dropSquareStyle,\r\n          onDragOverSquare\r\n        }) => (\r\n            <Chessboard\r\n              id=\"board\"\r\n              width={320}\r\n              position={position}\r\n              orientation={userColor.userColor === 'w' ? 'white' : 'black'}\r\n              onDrop={onDrop}\r\n              onMouseOverSquare={onMouseOverSquare}\r\n              onMouseOutSquare={onMouseOutSquare}\r\n              boardStyle={{\r\n                borderRadius: \"5px\",\r\n                boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\r\n              }}\r\n              squareStyles={squareStyles}\r\n              dropSquareStyle={dropSquareStyle}\r\n              onDragOverSquare={onDragOverSquare}\r\n            />\r\n          )}\r\n      </Board>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst squareStyling = ({ pieceSquare, history }) => {\r\n  const sourceSquare = history.length && history[history.length - 1].from;\r\n  const targetSquare = history.length && history[history.length - 1].to;\r\n\r\n  return {\r\n    [pieceSquare]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" },\r\n    ...(history.length && {\r\n      [sourceSquare]: {\r\n        backgroundColor: \"rgba(255, 255, 0, 0.4)\"\r\n      }\r\n    }),\r\n    ...(history.length && {\r\n      [targetSquare]: {\r\n        backgroundColor: \"rgba(255, 255, 0, 0.4)\"\r\n      }\r\n    })\r\n  };\r\n};","import React from 'react';\r\nimport { Segment, Dimmer, Modal, Button, Header, Dropdown } from 'semantic-ui-react'\r\n\r\nimport Game from './ChessBoard';\r\n\r\nclass Home extends React.Component {\r\n\r\n  state = {\r\n    dimmerActive: true,\r\n    userColor: ''\r\n  }\r\n\r\n  colorOptions = [\r\n    { key: 'w', value: 'w', text: 'White'},\r\n    { key: 'b', value: 'b', text: 'Black'},\r\n  ]\r\n\r\n  setUserColor = (e, data) => {\r\n    this.setState({ userColor: data.value }, () => console.log(this.state.userColor))\r\n  }\r\n\r\n  render() {\r\n    const { dimmerActive, userColor } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Segment compact padded='very' color='grey' inverted size='massive'>\r\n          <Dimmer active={dimmerActive} page />\r\n          {dimmerActive ?\r\n            <Modal open={dimmerActive}>\r\n              <Header> Welcome to the Harold Chess Engine </Header>\r\n              <Modal.Content>\r\n                <p>\r\n                  Please select your colour to begin playing:\r\n                </p>\r\n                <Dropdown placeholder='Colour' options={this.colorOptions} onChange={(e, data) => this.setUserColor(e, data)}/> \r\n              </Modal.Content>\r\n              <Modal.Actions>\r\n                <Button positive disabled={userColor === ''} onClick={() => this.setState({ dimmerActive: !dimmerActive })}>Play!</Button>\r\n              </Modal.Actions>\r\n            </Modal>\r\n            : <Game userColor={userColor}/>}\r\n          \r\n        </Segment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport './App.css';\n\nimport Home from './home';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}